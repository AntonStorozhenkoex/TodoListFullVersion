{"ast":null,"code":"import { ADD_TODO, DELETE_ALL_TODO, DELETE_TODO, GET_TODOS_SUCCESS, TOGGLE_TODO } from \"./types\";\nexport const fetchTodos = () => (dispatch, state, api) => {\n  dispatch({\n    type: \"START_LOADING_TODOS\"\n  });\n  return api.fetchData().then(response => {\n    dispatch({\n      type: GET_TODOS_SUCCESS,\n      payload: response\n    });\n  }).catch(err => dispatch({\n    type: \"ERROR_IN_LOADING_TODOS\"\n  }));\n};\nexport const addNewTodo = inputValue => (dispatch, state, api) => {\n  dispatch({\n    type: \"START_ADD_TODO\"\n  });\n  return api.createNewTodo(inputValue).then(response => {\n    dispatch({\n      type: ADD_TODO,\n      payload: response\n    });\n  }).catch(err => dispatch({\n    type: \"ERROR_IN_ADD_TODO\"\n  }));\n};\nexport const deleteTodo = todo => (dispatch, state, api) => {\n  dispatch({\n    type: \"START_DELETE_TODO\"\n  });\n  return api.deleteTodo(todo).then(response => {\n    dispatch({\n      type: DELETE_TODO,\n      payload: todo.id\n    });\n  }).catch(err => dispatch({\n    type: \"ERROR_IN_DELETING_TODO\"\n  }));\n};\nexport const toggleTodo = elem => (dispatch, state, api) => {\n  dispatch({\n    type: \"START_TOGGLE_TODO\"\n  });\n  return api.listItemToggle(elem).then(response => {\n    dispatch({\n      type: TOGGLE_TODO,\n      payload: elem.id\n    });\n  });\n};\nexport const deleteAllTodo = () => async (dispatch, state, api) => {\n  dispatch({\n    type: \"START_DELETE_ALL_TODO\"\n  });\n  return api.deleteAllItems().then(response => {\n    dispatch({\n      type: DELETE_ALL_TODO,\n      payload: response\n    });\n  }).catch(err => dispatch({\n    type: \"ERROR_IN_DELETED_ALL\"\n  }));\n};","map":{"version":3,"sources":["/home/user/work/TodoListReactReduxAPI/src/redux/todos/action.js"],"names":["ADD_TODO","DELETE_ALL_TODO","DELETE_TODO","GET_TODOS_SUCCESS","TOGGLE_TODO","fetchTodos","dispatch","state","api","type","fetchData","then","response","payload","catch","err","addNewTodo","inputValue","createNewTodo","deleteTodo","todo","id","toggleTodo","elem","listItemToggle","deleteAllTodo","deleteAllItems"],"mappings":"AAAA,SACIA,QADJ,EAEIC,eAFJ,EAGIC,WAHJ,EAIIC,iBAJJ,EAKIC,WALJ,QAMO,SANP;AAQA,OAAO,MAAMC,UAAU,GAAG,MAAM,CAACC,QAAD,EAAWC,KAAX,EAAkBC,GAAlB,KAA0B;AACtDF,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAAR;AAGA,SAAOD,GAAG,CACLE,SADE,GAEFC,IAFE,CAEIC,QAAD,IAAc;AAEhBN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,iBADD;AAELU,MAAAA,OAAO,EAAED;AAFJ,KAAD,CAAR;AAIH,GARE,EASFE,KATE,CASKC,GAAD,IACHT,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAVT,CAAP;AAcH,CAlBM;AAmBP,OAAO,MAAMO,UAAU,GAAIC,UAAD,IAAgB,CAACX,QAAD,EAAWC,KAAX,EAAkBC,GAAlB,KAA0B;AAChEF,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAAR;AAGA,SAAOD,GAAG,CACLU,aADE,CACYD,UADZ,EAEFN,IAFE,CAEIC,QAAD,IAAc;AAEhBN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,QADD;AAELa,MAAAA,OAAO,EAAED;AAFJ,KAAD,CAAR;AAIH,GARE,EASFE,KATE,CASKC,GAAD,IACHT,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAVT,CAAP;AAcH,CAlBM;AAmBP,OAAO,MAAMU,UAAU,GAAIC,IAAD,IAAU,CAACd,QAAD,EAAWC,KAAX,EAAkBC,GAAlB,KAA0B;AAC1DF,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAAR;AAGA,SAAOD,GAAG,CACLW,UADE,CACSC,IADT,EAEFT,IAFE,CAEIC,QAAD,IAAc;AAEhBN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEP,WADD;AAELW,MAAAA,OAAO,EAAEO,IAAI,CAACC;AAFT,KAAD,CAAR;AAIH,GARE,EASFP,KATE,CASKC,GAAD,IACHT,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAVT,CAAP;AAcH,CAlBM;AAmBP,OAAO,MAAMa,UAAU,GAAIC,IAAD,IAAU,CAACjB,QAAD,EAAWC,KAAX,EAAkBC,GAAlB,KAA0B;AAC1DF,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAAR;AAGA,SAAOD,GAAG,CAACgB,cAAJ,CAAmBD,IAAnB,EAAyBZ,IAAzB,CAA+BC,QAAD,IAAc;AAE/CN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEL,WADD;AAELS,MAAAA,OAAO,EAAEU,IAAI,CAACF;AAFT,KAAD,CAAR;AAIH,GANM,CAAP;AAOH,CAXM;AAYP,OAAO,MAAMI,aAAa,GAAG,MAAM,OAAOnB,QAAP,EAAiBC,KAAjB,EAAwBC,GAAxB,KAAgC;AAC/DF,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAAR;AAGA,SAAOD,GAAG,CACLkB,cADE,GAEFf,IAFE,CAEIC,QAAD,IAAc;AAEhBN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,eADD;AAELY,MAAAA,OAAO,EAAED;AAFJ,KAAD,CAAR;AAIH,GARE,EASFE,KATE,CASKC,GAAD,IACHT,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAE;AADD,GAAD,CAVT,CAAP;AAcH,CAlBM","sourcesContent":["import {\n    ADD_TODO,\n    DELETE_ALL_TODO,\n    DELETE_TODO,\n    GET_TODOS_SUCCESS,\n    TOGGLE_TODO,\n} from \"./types\";\n\nexport const fetchTodos = () => (dispatch, state, api) => {\n    dispatch({\n        type: \"START_LOADING_TODOS\",\n    });\n    return api\n        .fetchData()\n        .then((response) => {\n\n            dispatch({\n                type: GET_TODOS_SUCCESS,\n                payload: response,\n            });\n        })\n        .catch((err) =>\n            dispatch({\n                type: \"ERROR_IN_LOADING_TODOS\",\n            })\n        );\n};\nexport const addNewTodo = (inputValue) => (dispatch, state, api) => {\n    dispatch({\n        type: \"START_ADD_TODO\",\n    });\n    return api\n        .createNewTodo(inputValue)\n        .then((response) => {\n\n            dispatch({\n                type: ADD_TODO,\n                payload: response,\n            });\n        })\n        .catch((err) =>\n            dispatch({\n                type: \"ERROR_IN_ADD_TODO\",\n            })\n        );\n};\nexport const deleteTodo = (todo) => (dispatch, state, api) => {\n    dispatch({\n        type: \"START_DELETE_TODO\",\n    });\n    return api\n        .deleteTodo(todo)\n        .then((response) => {\n\n            dispatch({\n                type: DELETE_TODO,\n                payload: todo.id,\n            });\n        })\n        .catch((err) =>\n            dispatch({\n                type: \"ERROR_IN_DELETING_TODO\",\n            })\n        );\n};\nexport const toggleTodo = (elem) => (dispatch, state, api) => {\n    dispatch({\n        type: \"START_TOGGLE_TODO\",\n    });\n    return api.listItemToggle(elem).then((response) => {\n\n        dispatch({\n            type: TOGGLE_TODO,\n            payload: elem.id,\n        });\n    });\n};\nexport const deleteAllTodo = () => async (dispatch, state, api) => {\n    dispatch({\n        type: \"START_DELETE_ALL_TODO\",\n    });\n    return api\n        .deleteAllItems()\n        .then((response) => {\n\n            dispatch({\n                type: DELETE_ALL_TODO,\n                payload: response,\n            });\n        })\n        .catch((err) =>\n            dispatch({\n                type: \"ERROR_IN_DELETED_ALL\",\n            })\n        );\n};\n"]},"metadata":{},"sourceType":"module"}